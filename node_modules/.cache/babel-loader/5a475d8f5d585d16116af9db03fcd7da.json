{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Manager = void 0;\n\nconst engine_io_client_1 = require(\"engine.io-client\");\n\nconst socket_js_1 = require(\"./socket.js\");\n\nconst parser = __importStar(require(\"socket.io-parser\"));\n\nconst on_js_1 = require(\"./on.js\");\n\nconst backo2_1 = __importDefault(require(\"backo2\"));\n\nconst component_emitter_1 = require(\"@socket.io/component-emitter\");\n\nconst debug_1 = __importDefault(require(\"debug\")); // debug()\n\n\nconst debug = debug_1.default(\"socket.io-client:manager\"); // debug()\n\nclass Manager extends component_emitter_1.Emitter {\n  constructor(uri, opts) {\n    var _a;\n\n    super();\n    this.nsps = {};\n    this.subs = [];\n\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = undefined;\n    }\n\n    opts = opts || {};\n    opts.path = opts.path || \"/socket.io\";\n    this.opts = opts;\n    engine_io_client_1.installTimerFunctions(this, opts);\n    this.reconnection(opts.reconnection !== false);\n    this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n    this.reconnectionDelay(opts.reconnectionDelay || 1000);\n    this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n    this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n    this.backoff = new backo2_1.default({\n      min: this.reconnectionDelay(),\n      max: this.reconnectionDelayMax(),\n      jitter: this.randomizationFactor()\n    });\n    this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n    this._readyState = \"closed\";\n    this.uri = uri;\n\n    const _parser = opts.parser || parser;\n\n    this.encoder = new _parser.Encoder();\n    this.decoder = new _parser.Decoder();\n    this._autoConnect = opts.autoConnect !== false;\n    if (this._autoConnect) this.open();\n  }\n\n  reconnection(v) {\n    if (!arguments.length) return this._reconnection;\n    this._reconnection = !!v;\n    return this;\n  }\n\n  reconnectionAttempts(v) {\n    if (v === undefined) return this._reconnectionAttempts;\n    this._reconnectionAttempts = v;\n    return this;\n  }\n\n  reconnectionDelay(v) {\n    var _a;\n\n    if (v === undefined) return this._reconnectionDelay;\n    this._reconnectionDelay = v;\n    (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n    return this;\n  }\n\n  randomizationFactor(v) {\n    var _a;\n\n    if (v === undefined) return this._randomizationFactor;\n    this._randomizationFactor = v;\n    (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n    return this;\n  }\n\n  reconnectionDelayMax(v) {\n    var _a;\n\n    if (v === undefined) return this._reconnectionDelayMax;\n    this._reconnectionDelayMax = v;\n    (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n    return this;\n  }\n\n  timeout(v) {\n    if (!arguments.length) return this._timeout;\n    this._timeout = v;\n    return this;\n  }\n  /**\n   * Starts trying to reconnect if reconnection is enabled and we have not\n   * started reconnecting yet\n   *\n   * @private\n   */\n\n\n  maybeReconnectOnOpen() {\n    // Only try to reconnect if it's the first time we're connecting\n    if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {\n      // keeps reconnection from firing twice for the same reconnection loop\n      this.reconnect();\n    }\n  }\n  /**\n   * Sets the current transport `socket`.\n   *\n   * @param {Function} fn - optional, callback\n   * @return self\n   * @public\n   */\n\n\n  open(fn) {\n    debug(\"readyState %s\", this._readyState);\n    if (~this._readyState.indexOf(\"open\")) return this;\n    debug(\"opening %s\", this.uri);\n    this.engine = new engine_io_client_1.Socket(this.uri, this.opts);\n    const socket = this.engine;\n    const self = this;\n    this._readyState = \"opening\";\n    this.skipReconnect = false; // emit `open`\n\n    const openSubDestroy = on_js_1.on(socket, \"open\", function () {\n      self.onopen();\n      fn && fn();\n    }); // emit `error`\n\n    const errorSub = on_js_1.on(socket, \"error\", err => {\n      debug(\"error\");\n      self.cleanup();\n      self._readyState = \"closed\";\n      this.emitReserved(\"error\", err);\n\n      if (fn) {\n        fn(err);\n      } else {\n        // Only do this if there is no fn to handle the error\n        self.maybeReconnectOnOpen();\n      }\n    });\n\n    if (false !== this._timeout) {\n      const timeout = this._timeout;\n      debug(\"connect attempt will timeout after %d\", timeout);\n\n      if (timeout === 0) {\n        openSubDestroy(); // prevents a race condition with the 'open' event\n      } // set timer\n\n\n      const timer = this.setTimeoutFn(() => {\n        debug(\"connect attempt timed out after %d\", timeout);\n        openSubDestroy();\n        socket.close(); // @ts-ignore\n\n        socket.emit(\"error\", new Error(\"timeout\"));\n      }, timeout);\n\n      if (this.opts.autoUnref) {\n        timer.unref();\n      }\n\n      this.subs.push(function subDestroy() {\n        clearTimeout(timer);\n      });\n    }\n\n    this.subs.push(openSubDestroy);\n    this.subs.push(errorSub);\n    return this;\n  }\n  /**\n   * Alias for open()\n   *\n   * @return self\n   * @public\n   */\n\n\n  connect(fn) {\n    return this.open(fn);\n  }\n  /**\n   * Called upon transport open.\n   *\n   * @private\n   */\n\n\n  onopen() {\n    debug(\"open\"); // clear old subs\n\n    this.cleanup(); // mark as open\n\n    this._readyState = \"open\";\n    this.emitReserved(\"open\"); // add new subs\n\n    const socket = this.engine;\n    this.subs.push(on_js_1.on(socket, \"ping\", this.onping.bind(this)), on_js_1.on(socket, \"data\", this.ondata.bind(this)), on_js_1.on(socket, \"error\", this.onerror.bind(this)), on_js_1.on(socket, \"close\", this.onclose.bind(this)), on_js_1.on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n  }\n  /**\n   * Called upon a ping.\n   *\n   * @private\n   */\n\n\n  onping() {\n    this.emitReserved(\"ping\");\n  }\n  /**\n   * Called with data.\n   *\n   * @private\n   */\n\n\n  ondata(data) {\n    this.decoder.add(data);\n  }\n  /**\n   * Called when parser fully decodes a packet.\n   *\n   * @private\n   */\n\n\n  ondecoded(packet) {\n    this.emitReserved(\"packet\", packet);\n  }\n  /**\n   * Called upon socket error.\n   *\n   * @private\n   */\n\n\n  onerror(err) {\n    debug(\"error\", err);\n    this.emitReserved(\"error\", err);\n  }\n  /**\n   * Creates a new socket for the given `nsp`.\n   *\n   * @return {Socket}\n   * @public\n   */\n\n\n  socket(nsp, opts) {\n    let socket = this.nsps[nsp];\n\n    if (!socket) {\n      socket = new socket_js_1.Socket(this, nsp, opts);\n      this.nsps[nsp] = socket;\n    }\n\n    return socket;\n  }\n  /**\n   * Called upon a socket close.\n   *\n   * @param socket\n   * @private\n   */\n\n\n  _destroy(socket) {\n    const nsps = Object.keys(this.nsps);\n\n    for (const nsp of nsps) {\n      const socket = this.nsps[nsp];\n\n      if (socket.active) {\n        debug(\"socket %s is still active, skipping close\", nsp);\n        return;\n      }\n    }\n\n    this._close();\n  }\n  /**\n   * Writes a packet.\n   *\n   * @param packet\n   * @private\n   */\n\n\n  _packet(packet) {\n    debug(\"writing packet %j\", packet);\n    const encodedPackets = this.encoder.encode(packet);\n\n    for (let i = 0; i < encodedPackets.length; i++) {\n      this.engine.write(encodedPackets[i], packet.options);\n    }\n  }\n  /**\n   * Clean up transport subscriptions and packet buffer.\n   *\n   * @private\n   */\n\n\n  cleanup() {\n    debug(\"cleanup\");\n    this.subs.forEach(subDestroy => subDestroy());\n    this.subs.length = 0;\n    this.decoder.destroy();\n  }\n  /**\n   * Close the current socket.\n   *\n   * @private\n   */\n\n\n  _close() {\n    debug(\"disconnect\");\n    this.skipReconnect = true;\n    this._reconnecting = false;\n    this.onclose(\"forced close\");\n    if (this.engine) this.engine.close();\n  }\n  /**\n   * Alias for close()\n   *\n   * @private\n   */\n\n\n  disconnect() {\n    return this._close();\n  }\n  /**\n   * Called upon engine close.\n   *\n   * @private\n   */\n\n\n  onclose(reason) {\n    debug(\"closed due to %s\", reason);\n    this.cleanup();\n    this.backoff.reset();\n    this._readyState = \"closed\";\n    this.emitReserved(\"close\", reason);\n\n    if (this._reconnection && !this.skipReconnect) {\n      this.reconnect();\n    }\n  }\n  /**\n   * Attempt a reconnection.\n   *\n   * @private\n   */\n\n\n  reconnect() {\n    if (this._reconnecting || this.skipReconnect) return this;\n    const self = this;\n\n    if (this.backoff.attempts >= this._reconnectionAttempts) {\n      debug(\"reconnect failed\");\n      this.backoff.reset();\n      this.emitReserved(\"reconnect_failed\");\n      this._reconnecting = false;\n    } else {\n      const delay = this.backoff.duration();\n      debug(\"will wait %dms before reconnect attempt\", delay);\n      this._reconnecting = true;\n      const timer = this.setTimeoutFn(() => {\n        if (self.skipReconnect) return;\n        debug(\"attempting reconnect\");\n        this.emitReserved(\"reconnect_attempt\", self.backoff.attempts); // check again for the case socket closed in above events\n\n        if (self.skipReconnect) return;\n        self.open(err => {\n          if (err) {\n            debug(\"reconnect attempt error\");\n            self._reconnecting = false;\n            self.reconnect();\n            this.emitReserved(\"reconnect_error\", err);\n          } else {\n            debug(\"reconnect success\");\n            self.onreconnect();\n          }\n        });\n      }, delay);\n\n      if (this.opts.autoUnref) {\n        timer.unref();\n      }\n\n      this.subs.push(function subDestroy() {\n        clearTimeout(timer);\n      });\n    }\n  }\n  /**\n   * Called upon successful reconnect.\n   *\n   * @private\n   */\n\n\n  onreconnect() {\n    const attempt = this.backoff.attempts;\n    this._reconnecting = false;\n    this.backoff.reset();\n    this.emitReserved(\"reconnect\", attempt);\n  }\n\n}\n\nexports.Manager = Manager;","map":{"version":3,"sources":["C:/Users/Kevin/Documents/Chat_Bot/widget/node_modules/socket.io-client/build/cjs/manager.js"],"names":["__createBinding","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__setModuleDefault","v","value","__importStar","mod","__esModule","result","prototype","hasOwnProperty","call","__importDefault","exports","Manager","engine_io_client_1","require","socket_js_1","parser","on_js_1","backo2_1","component_emitter_1","debug_1","debug","default","Emitter","constructor","uri","opts","_a","nsps","subs","path","installTimerFunctions","reconnection","reconnectionAttempts","Infinity","reconnectionDelay","reconnectionDelayMax","randomizationFactor","backoff","min","max","jitter","timeout","_readyState","_parser","encoder","Encoder","decoder","Decoder","_autoConnect","autoConnect","open","arguments","length","_reconnection","_reconnectionAttempts","_reconnectionDelay","setMin","_randomizationFactor","setJitter","_reconnectionDelayMax","setMax","_timeout","maybeReconnectOnOpen","_reconnecting","attempts","reconnect","fn","indexOf","engine","Socket","socket","self","skipReconnect","openSubDestroy","on","onopen","errorSub","err","cleanup","emitReserved","timer","setTimeoutFn","close","emit","Error","autoUnref","unref","push","subDestroy","clearTimeout","connect","onping","bind","ondata","onerror","onclose","ondecoded","data","add","packet","nsp","_destroy","keys","active","_close","_packet","encodedPackets","encode","i","write","options","forEach","destroy","disconnect","reason","reset","delay","duration","onreconnect","attempt"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Manager = void 0;\nconst engine_io_client_1 = require(\"engine.io-client\");\nconst socket_js_1 = require(\"./socket.js\");\nconst parser = __importStar(require(\"socket.io-parser\"));\nconst on_js_1 = require(\"./on.js\");\nconst backo2_1 = __importDefault(require(\"backo2\"));\nconst component_emitter_1 = require(\"@socket.io/component-emitter\");\nconst debug_1 = __importDefault(require(\"debug\")); // debug()\nconst debug = debug_1.default(\"socket.io-client:manager\"); // debug()\nclass Manager extends component_emitter_1.Emitter {\n    constructor(uri, opts) {\n        var _a;\n        super();\n        this.nsps = {};\n        this.subs = [];\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = undefined;\n        }\n        opts = opts || {};\n        opts.path = opts.path || \"/socket.io\";\n        this.opts = opts;\n        engine_io_client_1.installTimerFunctions(this, opts);\n        this.reconnection(opts.reconnection !== false);\n        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n        this.reconnectionDelay(opts.reconnectionDelay || 1000);\n        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n        this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n        this.backoff = new backo2_1.default({\n            min: this.reconnectionDelay(),\n            max: this.reconnectionDelayMax(),\n            jitter: this.randomizationFactor(),\n        });\n        this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n        this._readyState = \"closed\";\n        this.uri = uri;\n        const _parser = opts.parser || parser;\n        this.encoder = new _parser.Encoder();\n        this.decoder = new _parser.Decoder();\n        this._autoConnect = opts.autoConnect !== false;\n        if (this._autoConnect)\n            this.open();\n    }\n    reconnection(v) {\n        if (!arguments.length)\n            return this._reconnection;\n        this._reconnection = !!v;\n        return this;\n    }\n    reconnectionAttempts(v) {\n        if (v === undefined)\n            return this._reconnectionAttempts;\n        this._reconnectionAttempts = v;\n        return this;\n    }\n    reconnectionDelay(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelay;\n        this._reconnectionDelay = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n        return this;\n    }\n    randomizationFactor(v) {\n        var _a;\n        if (v === undefined)\n            return this._randomizationFactor;\n        this._randomizationFactor = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n        return this;\n    }\n    reconnectionDelayMax(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelayMax;\n        this._reconnectionDelayMax = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n        return this;\n    }\n    timeout(v) {\n        if (!arguments.length)\n            return this._timeout;\n        this._timeout = v;\n        return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n    maybeReconnectOnOpen() {\n        // Only try to reconnect if it's the first time we're connecting\n        if (!this._reconnecting &&\n            this._reconnection &&\n            this.backoff.attempts === 0) {\n            // keeps reconnection from firing twice for the same reconnection loop\n            this.reconnect();\n        }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n    open(fn) {\n        debug(\"readyState %s\", this._readyState);\n        if (~this._readyState.indexOf(\"open\"))\n            return this;\n        debug(\"opening %s\", this.uri);\n        this.engine = new engine_io_client_1.Socket(this.uri, this.opts);\n        const socket = this.engine;\n        const self = this;\n        this._readyState = \"opening\";\n        this.skipReconnect = false;\n        // emit `open`\n        const openSubDestroy = on_js_1.on(socket, \"open\", function () {\n            self.onopen();\n            fn && fn();\n        });\n        // emit `error`\n        const errorSub = on_js_1.on(socket, \"error\", (err) => {\n            debug(\"error\");\n            self.cleanup();\n            self._readyState = \"closed\";\n            this.emitReserved(\"error\", err);\n            if (fn) {\n                fn(err);\n            }\n            else {\n                // Only do this if there is no fn to handle the error\n                self.maybeReconnectOnOpen();\n            }\n        });\n        if (false !== this._timeout) {\n            const timeout = this._timeout;\n            debug(\"connect attempt will timeout after %d\", timeout);\n            if (timeout === 0) {\n                openSubDestroy(); // prevents a race condition with the 'open' event\n            }\n            // set timer\n            const timer = this.setTimeoutFn(() => {\n                debug(\"connect attempt timed out after %d\", timeout);\n                openSubDestroy();\n                socket.close();\n                // @ts-ignore\n                socket.emit(\"error\", new Error(\"timeout\"));\n            }, timeout);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(function subDestroy() {\n                clearTimeout(timer);\n            });\n        }\n        this.subs.push(openSubDestroy);\n        this.subs.push(errorSub);\n        return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n    connect(fn) {\n        return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n    onopen() {\n        debug(\"open\");\n        // clear old subs\n        this.cleanup();\n        // mark as open\n        this._readyState = \"open\";\n        this.emitReserved(\"open\");\n        // add new subs\n        const socket = this.engine;\n        this.subs.push(on_js_1.on(socket, \"ping\", this.onping.bind(this)), on_js_1.on(socket, \"data\", this.ondata.bind(this)), on_js_1.on(socket, \"error\", this.onerror.bind(this)), on_js_1.on(socket, \"close\", this.onclose.bind(this)), on_js_1.on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n    onping() {\n        this.emitReserved(\"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n    ondata(data) {\n        this.decoder.add(data);\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n    ondecoded(packet) {\n        this.emitReserved(\"packet\", packet);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n    onerror(err) {\n        debug(\"error\", err);\n        this.emitReserved(\"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n    socket(nsp, opts) {\n        let socket = this.nsps[nsp];\n        if (!socket) {\n            socket = new socket_js_1.Socket(this, nsp, opts);\n            this.nsps[nsp] = socket;\n        }\n        return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n    _destroy(socket) {\n        const nsps = Object.keys(this.nsps);\n        for (const nsp of nsps) {\n            const socket = this.nsps[nsp];\n            if (socket.active) {\n                debug(\"socket %s is still active, skipping close\", nsp);\n                return;\n            }\n        }\n        this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n    _packet(packet) {\n        debug(\"writing packet %j\", packet);\n        const encodedPackets = this.encoder.encode(packet);\n        for (let i = 0; i < encodedPackets.length; i++) {\n            this.engine.write(encodedPackets[i], packet.options);\n        }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n    cleanup() {\n        debug(\"cleanup\");\n        this.subs.forEach((subDestroy) => subDestroy());\n        this.subs.length = 0;\n        this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n    _close() {\n        debug(\"disconnect\");\n        this.skipReconnect = true;\n        this._reconnecting = false;\n        this.onclose(\"forced close\");\n        if (this.engine)\n            this.engine.close();\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n    disconnect() {\n        return this._close();\n    }\n    /**\n     * Called upon engine close.\n     *\n     * @private\n     */\n    onclose(reason) {\n        debug(\"closed due to %s\", reason);\n        this.cleanup();\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        this.emitReserved(\"close\", reason);\n        if (this._reconnection && !this.skipReconnect) {\n            this.reconnect();\n        }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n    reconnect() {\n        if (this._reconnecting || this.skipReconnect)\n            return this;\n        const self = this;\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\n            debug(\"reconnect failed\");\n            this.backoff.reset();\n            this.emitReserved(\"reconnect_failed\");\n            this._reconnecting = false;\n        }\n        else {\n            const delay = this.backoff.duration();\n            debug(\"will wait %dms before reconnect attempt\", delay);\n            this._reconnecting = true;\n            const timer = this.setTimeoutFn(() => {\n                if (self.skipReconnect)\n                    return;\n                debug(\"attempting reconnect\");\n                this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n                // check again for the case socket closed in above events\n                if (self.skipReconnect)\n                    return;\n                self.open((err) => {\n                    if (err) {\n                        debug(\"reconnect attempt error\");\n                        self._reconnecting = false;\n                        self.reconnect();\n                        this.emitReserved(\"reconnect_error\", err);\n                    }\n                    else {\n                        debug(\"reconnect success\");\n                        self.onreconnect();\n                    }\n                });\n            }, delay);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(function subDestroy() {\n                clearTimeout(timer);\n            });\n        }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n    onreconnect() {\n        const attempt = this.backoff.attempts;\n        this._reconnecting = false;\n        this.backoff.reset();\n        this.emitReserved(\"reconnect\", attempt);\n    }\n}\nexports.Manager = Manager;\n"]},"metadata":{},"sourceType":"script"}