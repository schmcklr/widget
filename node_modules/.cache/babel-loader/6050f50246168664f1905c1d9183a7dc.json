{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kevin\\\\Documents\\\\Chat_Bot\\\\widget\\\\src\\\\pages\\\\Home.js\";\nimport { Component, useEffect } from \"react\";\nimport { Widget, addResponseMessage, setQuickButtons, addUserMessage, renderCustomComponent, handleQuickButtonClicked } from \"react-chat-widget\";\nimport \"react-chat-widget/lib/styles.css\";\nimport \"./Home.css\";\nimport \"./styles.scss\"; //TODO: Restructure Code maybe in seperate files and not all function in the home.js (Norman)\n//TODO: After the button clicked and send to BE no responses are coming -> fix\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  //******************************************************************\n  //Rest Api connection in use\n  //******************************************************************\n  // Used for submitting messages and getting responses\n  function handleMessagesAndResponses(newMessage) {\n    //********************POST*********************\n    // POST request using fetch() (currently used for sending/receiving messages)\n    fetch(\"http://localhost:5005/webhooks/rest/webhook\", {\n      // Adding method type\n      method: \"POST\",\n      // Adding body or contents to send\n      body: JSON.stringify({\n        sender: \"test_user\",\n        //message which was typed in via keyboard\n        message: newMessage\n      }),\n      // Adding headers to the request\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      }\n    }) // Converting to JSON\n    .then(response => response.json()) // Displaying results in chat widget\n    // Display text in widget\n    //.then(json => addResponseMessage(json[0].text))\n    // Used for texting: display text in console\n    //.then(json => console.log(json))\n    .then(function (json) {\n      let jsonData;\n      jsonData = json;\n      botResponse(jsonData); //TODO: Remove development functions\n\n      console.log(jsonData);\n    });\n  } // handle user Message typed in via keyboard\n\n\n  const handleNewUserMessage = newMessage => {\n    handleMessagesAndResponses(newMessage);\n  }; // function which checks message type of Bot Response\n\n\n  function botResponse(jsonData) {\n    let i;\n\n    for (i = 0; i < jsonData.length; i++) {\n      //buttons\n      if (jsonData[i].hasOwnProperty('buttons')) {\n        addResponseMessage(jsonData[i].text);\n        console.log(jsonData[i].buttons);\n        handleButtons(jsonData[i].buttons);\n      } //pictures\n      else if (jsonData[i].hasOwnProperty(\"image\")) {\n        handleImages(jsonData[i].image);\n      } //TODO: Handle Pictures and Text separately, searching for an identifier\n      //text\n      else {\n        console.log(jsonData[i].text);\n        addResponseMessage(jsonData[i].text);\n      }\n    }\n  } // handle bot response button\n\n\n  function handleButtons(jsonData) {\n    let i;\n    let buttons = [];\n\n    for (i = 0; i < jsonData.length; i++) {\n      console.log(jsonData[i].title);\n      buttons[i] = {\n        label: jsonData[i].title,\n        value: jsonData[i].title\n      };\n    }\n\n    setQuickButtons(buttons);\n  } // function that is triggerd if a button is clicked\n\n\n  const handleQuickButtonClicked = value => {\n    addUserMessage(value);\n    console.log(value);\n    handleMessagesAndResponses(value); //TODO: removes all buttons, in some cases that should not be the case because mor options can be selected, how can we identify?\n\n    setQuickButtons([]);\n  }; // handle bot response Images\n\n\n  function handleImages(jsonData) {\n    console.log(jsonData);\n    renderCustomComponent(Image, {\n      src: jsonData\n    });\n  } //needed to render pictures\n\n\n  class Image extends Component {\n    render() {\n      return /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"placeholder\",\n        src: this.props.src,\n        height: \"150\",\n        width: \"250\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 20\n      }, this);\n    }\n\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-center p-5 display-1\",\n        children: \"Liefy der Chatbot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"\",\n        children: \"Wie funktioniert Liefy?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Adipisci aliquam blanditiis cum debitis facilis ipsum magnam praesentium qui quo ratione soluta tempora ullam, unde vero voluptatibus. Alias enim placeat quisquam.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Widget, {\n      handleNewUserMessage: handleNewUserMessage,\n      handleQuickButtonClicked: handleQuickButtonClicked,\n      initPayload: \"/get_started\",\n      customData: {\n        \"language\": \"de\"\n      },\n      params: {\n        'storage': 'session'\n      },\n      title: \"Liefy der Chatbot\",\n      subtitle: \"How can I help you?\",\n      showTimeStamp: \"yes\",\n      emojis: 'YES',\n      resizable: 'YES'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/Kevin/Documents/Chat_Bot/widget/src/pages/Home.js"],"names":["Component","useEffect","Widget","addResponseMessage","setQuickButtons","addUserMessage","renderCustomComponent","handleQuickButtonClicked","Home","handleMessagesAndResponses","newMessage","fetch","method","body","JSON","stringify","sender","message","headers","then","response","json","jsonData","botResponse","console","log","handleNewUserMessage","i","length","hasOwnProperty","text","buttons","handleButtons","handleImages","image","title","label","value","Image","src","render","props"],"mappings":"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","sourcesContent":["import {Component, useEffect} from \"react\";\r\nimport {Widget, addResponseMessage, setQuickButtons,addUserMessage, renderCustomComponent, handleQuickButtonClicked} from \"react-chat-widget\";\r\nimport \"react-chat-widget/lib/styles.css\";\r\nimport \"./Home.css\"\r\nimport \"./styles.scss\";\r\n\r\n//TODO: Restructure Code maybe in seperate files and not all function in the home.js (Norman)\r\n//TODO: After the button clicked and send to BE no responses are coming -> fix\r\n\r\n\r\nconst Home = () => {\r\n\r\n    //******************************************************************\r\n    //Rest Api connection in use\r\n    //******************************************************************\r\n\r\n    // Used for submitting messages and getting responses\r\n    function handleMessagesAndResponses (newMessage){\r\n\r\n         //********************POST*********************\r\n        // POST request using fetch() (currently used for sending/receiving messages)\r\n        fetch(\"http://localhost:5005/webhooks/rest/webhook\", {\r\n\r\n            // Adding method type\r\n            method: \"POST\",\r\n\r\n            // Adding body or contents to send\r\n            body: JSON.stringify({\r\n                sender: \"test_user\",\r\n                //message which was typed in via keyboard\r\n                message: newMessage\r\n            }),\r\n\r\n            // Adding headers to the request\r\n            headers: {\r\n                \"Content-type\": \"application/json; charset=UTF-8\"\r\n            }\r\n        })\r\n\r\n            // Converting to JSON\r\n            .then(response => response.json()\r\n            )\r\n\r\n            // Displaying results in chat widget\r\n\r\n            // Display text in widget\r\n            //.then(json => addResponseMessage(json[0].text))\r\n            // Used for texting: display text in console\r\n            //.then(json => console.log(json))\r\n            .then(function (json) {\r\n                let jsonData\r\n                jsonData = json\r\n                botResponse(jsonData)\r\n                //TODO: Remove development functions\r\n                console.log(jsonData)\r\n            });\r\n    }\r\n\r\n    // handle user Message typed in via keyboard\r\n    const handleNewUserMessage = (newMessage) => {\r\n        handleMessagesAndResponses (newMessage)\r\n    };\r\n\r\n\r\n    // function which checks message type of Bot Response\r\n    function botResponse(jsonData) {\r\n\r\n        let i;\r\n        for (i=0; i < jsonData.length ; i++) {\r\n\r\n            //buttons\r\n            if (jsonData[i].hasOwnProperty('buttons')) {\r\n                addResponseMessage(jsonData[i].text)\r\n                console.log(jsonData[i].buttons)\r\n                handleButtons(jsonData[i].buttons)\r\n            }\r\n            //pictures\r\n            else if (jsonData[i].hasOwnProperty(\"image\")) {\r\n                handleImages(jsonData[i].image)\r\n            }\r\n\r\n            //TODO: Handle Pictures and Text separately, searching for an identifier\r\n            //text\r\n            else {\r\n                console.log(jsonData[i].text)\r\n                addResponseMessage(jsonData[i].text)\r\n            }\r\n        }\r\n    }\r\n\r\n    // handle bot response button\r\n    function handleButtons (jsonData){\r\n\r\n        let i;\r\n        let buttons = [];\r\n\r\n        for (i=0; i < jsonData.length ; i++) {\r\n\r\n            console.log(jsonData[i].title)\r\n            buttons[i] = {\r\n                        label: jsonData[i].title,\r\n                        value: jsonData[i].title,\r\n                      };\r\n        }\r\n        setQuickButtons(buttons);\r\n    }\r\n\r\n    // function that is triggerd if a button is clicked\r\n    const handleQuickButtonClicked = (value) => {\r\n        addUserMessage(value)\r\n        console.log(value)\r\n        handleMessagesAndResponses(value)\r\n\r\n        //TODO: removes all buttons, in some cases that should not be the case because mor options can be selected, how can we identify?\r\n        setQuickButtons([]);\r\n    }\r\n\r\n    // handle bot response Images\r\n    function handleImages (jsonData) {\r\n        console.log(jsonData)\r\n        renderCustomComponent(Image, {src: jsonData})\r\n    }\r\n\r\n    //needed to render pictures\r\n    class Image extends Component {\r\n        render() {\r\n            return <img  alt=\"placeholder\" src={this.props.src} height=\"150\" width=\"250\" ></img>\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <h1 className=\"text-center p-5 display-1\">Liefy der Chatbot</h1>\r\n                <hr/>\r\n                <br/>\r\n                <h2 className=\"\">Wie funktioniert Liefy?</h2>\r\n                <hr/>\r\n                <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Adipisci aliquam blanditiis cum debitis\r\n                        facilis ipsum magnam praesentium qui quo ratione soluta tempora ullam, unde vero voluptatibus. Alias\r\n                        enim placeat quisquam.</p>\r\n\r\n            </div>\r\n            <Widget handleNewUserMessage={handleNewUserMessage}\r\n                    handleQuickButtonClicked={handleQuickButtonClicked}\r\n                    initPayload={\"/get_started\"}\r\n                    customData={{\"language\": \"de\"}}\r\n                    params={{'storage':'session'}}\r\n                    title={\"Liefy der Chatbot\"}\r\n                    subtitle={\"How can I help you?\"}\r\n                    showTimeStamp={\"yes\"}\r\n                    emojis={'YES'}\r\n                    resizable={'YES'}\r\n\r\n\r\n\r\n            />\r\n        </div>\r\n    );\r\n};\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}