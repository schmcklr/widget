{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Socket = void 0;\n\nconst index_js_1 = require(\"./transports/index.js\");\n\nconst util_js_1 = require(\"./util.js\");\n\nconst parseqs_1 = __importDefault(require(\"parseqs\"));\n\nconst parseuri_1 = __importDefault(require(\"parseuri\"));\n\nconst debug_1 = __importDefault(require(\"debug\")); // debug()\n\n\nconst component_emitter_1 = require(\"@socket.io/component-emitter\");\n\nconst engine_io_parser_1 = require(\"engine.io-parser\");\n\nconst debug = (0, debug_1.default)(\"engine.io-client:socket\"); // debug()\n\nclass Socket extends component_emitter_1.Emitter {\n  /**\n   * Socket constructor.\n   *\n   * @param {String|Object} uri or options\n   * @param {Object} opts - options\n   * @api public\n   */\n  constructor(uri) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super();\n\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = null;\n    }\n\n    if (uri) {\n      uri = (0, parseuri_1.default)(uri);\n      opts.hostname = uri.host;\n      opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n      opts.port = uri.port;\n      if (uri.query) opts.query = uri.query;\n    } else if (opts.host) {\n      opts.hostname = (0, parseuri_1.default)(opts.host).host;\n    }\n\n    (0, util_js_1.installTimerFunctions)(this, opts);\n    this.secure = null != opts.secure ? opts.secure : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n\n    if (opts.hostname && !opts.port) {\n      // if no port is specified manually, use the protocol default\n      opts.port = this.secure ? \"443\" : \"80\";\n    }\n\n    this.hostname = opts.hostname || (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n    this.port = opts.port || (typeof location !== \"undefined\" && location.port ? location.port : this.secure ? \"443\" : \"80\");\n    this.transports = opts.transports || [\"polling\", \"websocket\"];\n    this.readyState = \"\";\n    this.writeBuffer = [];\n    this.prevBufferLen = 0;\n    this.opts = Object.assign({\n      path: \"/engine.io\",\n      agent: false,\n      withCredentials: false,\n      upgrade: true,\n      timestampParam: \"t\",\n      rememberUpgrade: false,\n      rejectUnauthorized: true,\n      perMessageDeflate: {\n        threshold: 1024\n      },\n      transportOptions: {},\n      closeOnBeforeunload: true\n    }, opts);\n    this.opts.path = this.opts.path.replace(/\\/$/, \"\") + \"/\";\n\n    if (typeof this.opts.query === \"string\") {\n      this.opts.query = parseqs_1.default.decode(this.opts.query);\n    } // set on handshake\n\n\n    this.id = null;\n    this.upgrades = null;\n    this.pingInterval = null;\n    this.pingTimeout = null; // set on heartbeat\n\n    this.pingTimeoutTimer = null;\n\n    if (typeof addEventListener === \"function\") {\n      if (this.opts.closeOnBeforeunload) {\n        // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n        // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n        // closed/reloaded)\n        addEventListener(\"beforeunload\", () => {\n          if (this.transport) {\n            // silently close the transport\n            this.transport.removeAllListeners();\n            this.transport.close();\n          }\n        }, false);\n      }\n\n      if (this.hostname !== \"localhost\") {\n        this.offlineEventListener = () => {\n          this.onClose(\"transport close\");\n        };\n\n        addEventListener(\"offline\", this.offlineEventListener, false);\n      }\n    }\n\n    this.open();\n  }\n  /**\n   * Creates transport of the given type.\n   *\n   * @param {String} transport name\n   * @return {Transport}\n   * @api private\n   */\n\n\n  createTransport(name) {\n    debug('creating transport \"%s\"', name);\n    const query = clone(this.opts.query); // append engine.io protocol identifier\n\n    query.EIO = engine_io_parser_1.protocol; // transport name\n\n    query.transport = name; // session id if we already have one\n\n    if (this.id) query.sid = this.id;\n    const opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {\n      query,\n      socket: this,\n      hostname: this.hostname,\n      secure: this.secure,\n      port: this.port\n    });\n    debug(\"options: %j\", opts);\n    return new index_js_1.transports[name](opts);\n  }\n  /**\n   * Initializes transport to use and starts probe.\n   *\n   * @api private\n   */\n\n\n  open() {\n    let transport;\n\n    if (this.opts.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1) {\n      transport = \"websocket\";\n    } else if (0 === this.transports.length) {\n      // Emit error on next tick so it can be listened to\n      this.setTimeoutFn(() => {\n        this.emitReserved(\"error\", \"No transports available\");\n      }, 0);\n      return;\n    } else {\n      transport = this.transports[0];\n    }\n\n    this.readyState = \"opening\"; // Retry with the next transport if the transport is disabled (jsonp: false)\n\n    try {\n      transport = this.createTransport(transport);\n    } catch (e) {\n      debug(\"error while creating transport: %s\", e);\n      this.transports.shift();\n      this.open();\n      return;\n    }\n\n    transport.open();\n    this.setTransport(transport);\n  }\n  /**\n   * Sets the current transport. Disables the existing one (if any).\n   *\n   * @api private\n   */\n\n\n  setTransport(transport) {\n    debug(\"setting transport %s\", transport.name);\n\n    if (this.transport) {\n      debug(\"clearing existing transport %s\", this.transport.name);\n      this.transport.removeAllListeners();\n    } // set up transport\n\n\n    this.transport = transport; // set up transport listeners\n\n    transport.on(\"drain\", this.onDrain.bind(this)).on(\"packet\", this.onPacket.bind(this)).on(\"error\", this.onError.bind(this)).on(\"close\", () => {\n      this.onClose(\"transport close\");\n    });\n  }\n  /**\n   * Probes a transport.\n   *\n   * @param {String} transport name\n   * @api private\n   */\n\n\n  probe(name) {\n    debug('probing transport \"%s\"', name);\n    let transport = this.createTransport(name);\n    let failed = false;\n    Socket.priorWebsocketSuccess = false;\n\n    const onTransportOpen = () => {\n      if (failed) return;\n      debug('probe transport \"%s\" opened', name);\n      transport.send([{\n        type: \"ping\",\n        data: \"probe\"\n      }]);\n      transport.once(\"packet\", msg => {\n        if (failed) return;\n\n        if (\"pong\" === msg.type && \"probe\" === msg.data) {\n          debug('probe transport \"%s\" pong', name);\n          this.upgrading = true;\n          this.emitReserved(\"upgrading\", transport);\n          if (!transport) return;\n          Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n          debug('pausing current transport \"%s\"', this.transport.name);\n          this.transport.pause(() => {\n            if (failed) return;\n            if (\"closed\" === this.readyState) return;\n            debug(\"changing transport and sending upgrade packet\");\n            cleanup();\n            this.setTransport(transport);\n            transport.send([{\n              type: \"upgrade\"\n            }]);\n            this.emitReserved(\"upgrade\", transport);\n            transport = null;\n            this.upgrading = false;\n            this.flush();\n          });\n        } else {\n          debug('probe transport \"%s\" failed', name);\n          const err = new Error(\"probe error\"); // @ts-ignore\n\n          err.transport = transport.name;\n          this.emitReserved(\"upgradeError\", err);\n        }\n      });\n    };\n\n    function freezeTransport() {\n      if (failed) return; // Any callback called by transport should be ignored since now\n\n      failed = true;\n      cleanup();\n      transport.close();\n      transport = null;\n    } // Handle any error that happens while probing\n\n\n    const onerror = err => {\n      const error = new Error(\"probe error: \" + err); // @ts-ignore\n\n      error.transport = transport.name;\n      freezeTransport();\n      debug('probe transport \"%s\" failed because of error: %s', name, err);\n      this.emitReserved(\"upgradeError\", error);\n    };\n\n    function onTransportClose() {\n      onerror(\"transport closed\");\n    } // When the socket is closed while we're probing\n\n\n    function onclose() {\n      onerror(\"socket closed\");\n    } // When the socket is upgraded while we're probing\n\n\n    function onupgrade(to) {\n      if (transport && to.name !== transport.name) {\n        debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n        freezeTransport();\n      }\n    } // Remove all listeners on the transport and on self\n\n\n    const cleanup = () => {\n      transport.removeListener(\"open\", onTransportOpen);\n      transport.removeListener(\"error\", onerror);\n      transport.removeListener(\"close\", onTransportClose);\n      this.off(\"close\", onclose);\n      this.off(\"upgrading\", onupgrade);\n    };\n\n    transport.once(\"open\", onTransportOpen);\n    transport.once(\"error\", onerror);\n    transport.once(\"close\", onTransportClose);\n    this.once(\"close\", onclose);\n    this.once(\"upgrading\", onupgrade);\n    transport.open();\n  }\n  /**\n   * Called when connection is deemed open.\n   *\n   * @api private\n   */\n\n\n  onOpen() {\n    debug(\"socket open\");\n    this.readyState = \"open\";\n    Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n    this.emitReserved(\"open\");\n    this.flush(); // we check for `readyState` in case an `open`\n    // listener already closed the socket\n\n    if (\"open\" === this.readyState && this.opts.upgrade && this.transport.pause) {\n      debug(\"starting upgrade probes\");\n      let i = 0;\n      const l = this.upgrades.length;\n\n      for (; i < l; i++) {\n        this.probe(this.upgrades[i]);\n      }\n    }\n  }\n  /**\n   * Handles a packet.\n   *\n   * @api private\n   */\n\n\n  onPacket(packet) {\n    if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n      debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n      this.emitReserved(\"packet\", packet); // Socket is live - any packet counts\n\n      this.emitReserved(\"heartbeat\");\n\n      switch (packet.type) {\n        case \"open\":\n          this.onHandshake(JSON.parse(packet.data));\n          break;\n\n        case \"ping\":\n          this.resetPingTimeout();\n          this.sendPacket(\"pong\");\n          this.emitReserved(\"ping\");\n          this.emitReserved(\"pong\");\n          break;\n\n        case \"error\":\n          const err = new Error(\"server error\"); // @ts-ignore\n\n          err.code = packet.data;\n          this.onError(err);\n          break;\n\n        case \"message\":\n          this.emitReserved(\"data\", packet.data);\n          this.emitReserved(\"message\", packet.data);\n          break;\n      }\n    } else {\n      debug('packet received with socket readyState \"%s\"', this.readyState);\n    }\n  }\n  /**\n   * Called upon handshake completion.\n   *\n   * @param {Object} data - handshake obj\n   * @api private\n   */\n\n\n  onHandshake(data) {\n    this.emitReserved(\"handshake\", data);\n    this.id = data.sid;\n    this.transport.query.sid = data.sid;\n    this.upgrades = this.filterUpgrades(data.upgrades);\n    this.pingInterval = data.pingInterval;\n    this.pingTimeout = data.pingTimeout;\n    this.onOpen(); // In case open handler closes socket\n\n    if (\"closed\" === this.readyState) return;\n    this.resetPingTimeout();\n  }\n  /**\n   * Sets and resets ping timeout timer based on server pings.\n   *\n   * @api private\n   */\n\n\n  resetPingTimeout() {\n    this.clearTimeoutFn(this.pingTimeoutTimer);\n    this.pingTimeoutTimer = this.setTimeoutFn(() => {\n      this.onClose(\"ping timeout\");\n    }, this.pingInterval + this.pingTimeout);\n\n    if (this.opts.autoUnref) {\n      this.pingTimeoutTimer.unref();\n    }\n  }\n  /**\n   * Called on `drain` event\n   *\n   * @api private\n   */\n\n\n  onDrain() {\n    this.writeBuffer.splice(0, this.prevBufferLen); // setting prevBufferLen = 0 is very important\n    // for example, when upgrading, upgrade packet is sent over,\n    // and a nonzero prevBufferLen could cause problems on `drain`\n\n    this.prevBufferLen = 0;\n\n    if (0 === this.writeBuffer.length) {\n      this.emitReserved(\"drain\");\n    } else {\n      this.flush();\n    }\n  }\n  /**\n   * Flush write buffers.\n   *\n   * @api private\n   */\n\n\n  flush() {\n    if (\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n      debug(\"flushing %d packets in socket\", this.writeBuffer.length);\n      this.transport.send(this.writeBuffer); // keep track of current length of writeBuffer\n      // splice writeBuffer and callbackBuffer on `drain`\n\n      this.prevBufferLen = this.writeBuffer.length;\n      this.emitReserved(\"flush\");\n    }\n  }\n  /**\n   * Sends a message.\n   *\n   * @param {String} message.\n   * @param {Function} callback function.\n   * @param {Object} options.\n   * @return {Socket} for chaining.\n   * @api public\n   */\n\n\n  write(msg, options, fn) {\n    this.sendPacket(\"message\", msg, options, fn);\n    return this;\n  }\n\n  send(msg, options, fn) {\n    this.sendPacket(\"message\", msg, options, fn);\n    return this;\n  }\n  /**\n   * Sends a packet.\n   *\n   * @param {String} packet type.\n   * @param {String} data.\n   * @param {Object} options.\n   * @param {Function} callback function.\n   * @api private\n   */\n\n\n  sendPacket(type, data, options, fn) {\n    if (\"function\" === typeof data) {\n      fn = data;\n      data = undefined;\n    }\n\n    if (\"function\" === typeof options) {\n      fn = options;\n      options = null;\n    }\n\n    if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n      return;\n    }\n\n    options = options || {};\n    options.compress = false !== options.compress;\n    const packet = {\n      type: type,\n      data: data,\n      options: options\n    };\n    this.emitReserved(\"packetCreate\", packet);\n    this.writeBuffer.push(packet);\n    if (fn) this.once(\"flush\", fn);\n    this.flush();\n  }\n  /**\n   * Closes the connection.\n   *\n   * @api public\n   */\n\n\n  close() {\n    const close = () => {\n      this.onClose(\"forced close\");\n      debug(\"socket closing - telling transport to close\");\n      this.transport.close();\n    };\n\n    const cleanupAndClose = () => {\n      this.off(\"upgrade\", cleanupAndClose);\n      this.off(\"upgradeError\", cleanupAndClose);\n      close();\n    };\n\n    const waitForUpgrade = () => {\n      // wait for upgrade to finish since we can't send packets while pausing a transport\n      this.once(\"upgrade\", cleanupAndClose);\n      this.once(\"upgradeError\", cleanupAndClose);\n    };\n\n    if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n      this.readyState = \"closing\";\n\n      if (this.writeBuffer.length) {\n        this.once(\"drain\", () => {\n          if (this.upgrading) {\n            waitForUpgrade();\n          } else {\n            close();\n          }\n        });\n      } else if (this.upgrading) {\n        waitForUpgrade();\n      } else {\n        close();\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Called upon transport error\n   *\n   * @api private\n   */\n\n\n  onError(err) {\n    debug(\"socket error %j\", err);\n    Socket.priorWebsocketSuccess = false;\n    this.emitReserved(\"error\", err);\n    this.onClose(\"transport error\", err);\n  }\n  /**\n   * Called upon transport close.\n   *\n   * @api private\n   */\n\n\n  onClose(reason, desc) {\n    if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n      debug('socket close with reason: \"%s\"', reason); // clear timers\n\n      this.clearTimeoutFn(this.pingTimeoutTimer); // stop event from firing again for transport\n\n      this.transport.removeAllListeners(\"close\"); // ensure transport won't stay open\n\n      this.transport.close(); // ignore further transport communication\n\n      this.transport.removeAllListeners();\n\n      if (typeof removeEventListener === \"function\") {\n        removeEventListener(\"offline\", this.offlineEventListener, false);\n      } // set ready state\n\n\n      this.readyState = \"closed\"; // clear session id\n\n      this.id = null; // emit close event\n\n      this.emitReserved(\"close\", reason, desc); // clean buffers after, so users can still\n      // grab the buffers on `close` event\n\n      this.writeBuffer = [];\n      this.prevBufferLen = 0;\n    }\n  }\n  /**\n   * Filters upgrades, returning only those matching client transports.\n   *\n   * @param {Array} server upgrades\n   * @api private\n   *\n   */\n\n\n  filterUpgrades(upgrades) {\n    const filteredUpgrades = [];\n    let i = 0;\n    const j = upgrades.length;\n\n    for (; i < j; i++) {\n      if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);\n    }\n\n    return filteredUpgrades;\n  }\n\n}\n\nexports.Socket = Socket;\nSocket.protocol = engine_io_parser_1.protocol;\n\nfunction clone(obj) {\n  const o = {};\n\n  for (let i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      o[i] = obj[i];\n    }\n  }\n\n  return o;\n}","map":{"version":3,"sources":["C:/Users/Kevin/Documents/Chat_Bot/widget/node_modules/engine.io-client/build/cjs/socket.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Socket","index_js_1","require","util_js_1","parseqs_1","parseuri_1","debug_1","component_emitter_1","engine_io_parser_1","debug","default","Emitter","constructor","uri","opts","hostname","host","secure","protocol","port","query","installTimerFunctions","location","transports","readyState","writeBuffer","prevBufferLen","assign","path","agent","withCredentials","upgrade","timestampParam","rememberUpgrade","rejectUnauthorized","perMessageDeflate","threshold","transportOptions","closeOnBeforeunload","replace","decode","id","upgrades","pingInterval","pingTimeout","pingTimeoutTimer","addEventListener","transport","removeAllListeners","close","offlineEventListener","onClose","open","createTransport","name","clone","EIO","sid","socket","priorWebsocketSuccess","indexOf","length","setTimeoutFn","emitReserved","e","shift","setTransport","on","onDrain","bind","onPacket","onError","probe","failed","onTransportOpen","send","type","data","once","msg","upgrading","pause","cleanup","flush","err","Error","freezeTransport","onerror","error","onTransportClose","onclose","onupgrade","to","removeListener","off","onOpen","i","l","packet","onHandshake","JSON","parse","resetPingTimeout","sendPacket","code","filterUpgrades","clearTimeoutFn","autoUnref","unref","splice","writable","write","options","fn","undefined","compress","push","cleanupAndClose","waitForUpgrade","reason","desc","removeEventListener","filteredUpgrades","j","obj","o","hasOwnProperty"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Socket = void 0;\nconst index_js_1 = require(\"./transports/index.js\");\nconst util_js_1 = require(\"./util.js\");\nconst parseqs_1 = __importDefault(require(\"parseqs\"));\nconst parseuri_1 = __importDefault(require(\"parseuri\"));\nconst debug_1 = __importDefault(require(\"debug\")); // debug()\nconst component_emitter_1 = require(\"@socket.io/component-emitter\");\nconst engine_io_parser_1 = require(\"engine.io-parser\");\nconst debug = (0, debug_1.default)(\"engine.io-client:socket\"); // debug()\nclass Socket extends component_emitter_1.Emitter {\n    /**\n     * Socket constructor.\n     *\n     * @param {String|Object} uri or options\n     * @param {Object} opts - options\n     * @api public\n     */\n    constructor(uri, opts = {}) {\n        super();\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = null;\n        }\n        if (uri) {\n            uri = (0, parseuri_1.default)(uri);\n            opts.hostname = uri.host;\n            opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n            opts.port = uri.port;\n            if (uri.query)\n                opts.query = uri.query;\n        }\n        else if (opts.host) {\n            opts.hostname = (0, parseuri_1.default)(opts.host).host;\n        }\n        (0, util_js_1.installTimerFunctions)(this, opts);\n        this.secure =\n            null != opts.secure\n                ? opts.secure\n                : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n        if (opts.hostname && !opts.port) {\n            // if no port is specified manually, use the protocol default\n            opts.port = this.secure ? \"443\" : \"80\";\n        }\n        this.hostname =\n            opts.hostname ||\n                (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n        this.port =\n            opts.port ||\n                (typeof location !== \"undefined\" && location.port\n                    ? location.port\n                    : this.secure\n                        ? \"443\"\n                        : \"80\");\n        this.transports = opts.transports || [\"polling\", \"websocket\"];\n        this.readyState = \"\";\n        this.writeBuffer = [];\n        this.prevBufferLen = 0;\n        this.opts = Object.assign({\n            path: \"/engine.io\",\n            agent: false,\n            withCredentials: false,\n            upgrade: true,\n            timestampParam: \"t\",\n            rememberUpgrade: false,\n            rejectUnauthorized: true,\n            perMessageDeflate: {\n                threshold: 1024\n            },\n            transportOptions: {},\n            closeOnBeforeunload: true\n        }, opts);\n        this.opts.path = this.opts.path.replace(/\\/$/, \"\") + \"/\";\n        if (typeof this.opts.query === \"string\") {\n            this.opts.query = parseqs_1.default.decode(this.opts.query);\n        }\n        // set on handshake\n        this.id = null;\n        this.upgrades = null;\n        this.pingInterval = null;\n        this.pingTimeout = null;\n        // set on heartbeat\n        this.pingTimeoutTimer = null;\n        if (typeof addEventListener === \"function\") {\n            if (this.opts.closeOnBeforeunload) {\n                // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n                // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n                // closed/reloaded)\n                addEventListener(\"beforeunload\", () => {\n                    if (this.transport) {\n                        // silently close the transport\n                        this.transport.removeAllListeners();\n                        this.transport.close();\n                    }\n                }, false);\n            }\n            if (this.hostname !== \"localhost\") {\n                this.offlineEventListener = () => {\n                    this.onClose(\"transport close\");\n                };\n                addEventListener(\"offline\", this.offlineEventListener, false);\n            }\n        }\n        this.open();\n    }\n    /**\n     * Creates transport of the given type.\n     *\n     * @param {String} transport name\n     * @return {Transport}\n     * @api private\n     */\n    createTransport(name) {\n        debug('creating transport \"%s\"', name);\n        const query = clone(this.opts.query);\n        // append engine.io protocol identifier\n        query.EIO = engine_io_parser_1.protocol;\n        // transport name\n        query.transport = name;\n        // session id if we already have one\n        if (this.id)\n            query.sid = this.id;\n        const opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {\n            query,\n            socket: this,\n            hostname: this.hostname,\n            secure: this.secure,\n            port: this.port\n        });\n        debug(\"options: %j\", opts);\n        return new index_js_1.transports[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @api private\n     */\n    open() {\n        let transport;\n        if (this.opts.rememberUpgrade &&\n            Socket.priorWebsocketSuccess &&\n            this.transports.indexOf(\"websocket\") !== -1) {\n            transport = \"websocket\";\n        }\n        else if (0 === this.transports.length) {\n            // Emit error on next tick so it can be listened to\n            this.setTimeoutFn(() => {\n                this.emitReserved(\"error\", \"No transports available\");\n            }, 0);\n            return;\n        }\n        else {\n            transport = this.transports[0];\n        }\n        this.readyState = \"opening\";\n        // Retry with the next transport if the transport is disabled (jsonp: false)\n        try {\n            transport = this.createTransport(transport);\n        }\n        catch (e) {\n            debug(\"error while creating transport: %s\", e);\n            this.transports.shift();\n            this.open();\n            return;\n        }\n        transport.open();\n        this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @api private\n     */\n    setTransport(transport) {\n        debug(\"setting transport %s\", transport.name);\n        if (this.transport) {\n            debug(\"clearing existing transport %s\", this.transport.name);\n            this.transport.removeAllListeners();\n        }\n        // set up transport\n        this.transport = transport;\n        // set up transport listeners\n        transport\n            .on(\"drain\", this.onDrain.bind(this))\n            .on(\"packet\", this.onPacket.bind(this))\n            .on(\"error\", this.onError.bind(this))\n            .on(\"close\", () => {\n            this.onClose(\"transport close\");\n        });\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} transport name\n     * @api private\n     */\n    probe(name) {\n        debug('probing transport \"%s\"', name);\n        let transport = this.createTransport(name);\n        let failed = false;\n        Socket.priorWebsocketSuccess = false;\n        const onTransportOpen = () => {\n            if (failed)\n                return;\n            debug('probe transport \"%s\" opened', name);\n            transport.send([{ type: \"ping\", data: \"probe\" }]);\n            transport.once(\"packet\", msg => {\n                if (failed)\n                    return;\n                if (\"pong\" === msg.type && \"probe\" === msg.data) {\n                    debug('probe transport \"%s\" pong', name);\n                    this.upgrading = true;\n                    this.emitReserved(\"upgrading\", transport);\n                    if (!transport)\n                        return;\n                    Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n                    debug('pausing current transport \"%s\"', this.transport.name);\n                    this.transport.pause(() => {\n                        if (failed)\n                            return;\n                        if (\"closed\" === this.readyState)\n                            return;\n                        debug(\"changing transport and sending upgrade packet\");\n                        cleanup();\n                        this.setTransport(transport);\n                        transport.send([{ type: \"upgrade\" }]);\n                        this.emitReserved(\"upgrade\", transport);\n                        transport = null;\n                        this.upgrading = false;\n                        this.flush();\n                    });\n                }\n                else {\n                    debug('probe transport \"%s\" failed', name);\n                    const err = new Error(\"probe error\");\n                    // @ts-ignore\n                    err.transport = transport.name;\n                    this.emitReserved(\"upgradeError\", err);\n                }\n            });\n        };\n        function freezeTransport() {\n            if (failed)\n                return;\n            // Any callback called by transport should be ignored since now\n            failed = true;\n            cleanup();\n            transport.close();\n            transport = null;\n        }\n        // Handle any error that happens while probing\n        const onerror = err => {\n            const error = new Error(\"probe error: \" + err);\n            // @ts-ignore\n            error.transport = transport.name;\n            freezeTransport();\n            debug('probe transport \"%s\" failed because of error: %s', name, err);\n            this.emitReserved(\"upgradeError\", error);\n        };\n        function onTransportClose() {\n            onerror(\"transport closed\");\n        }\n        // When the socket is closed while we're probing\n        function onclose() {\n            onerror(\"socket closed\");\n        }\n        // When the socket is upgraded while we're probing\n        function onupgrade(to) {\n            if (transport && to.name !== transport.name) {\n                debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n                freezeTransport();\n            }\n        }\n        // Remove all listeners on the transport and on self\n        const cleanup = () => {\n            transport.removeListener(\"open\", onTransportOpen);\n            transport.removeListener(\"error\", onerror);\n            transport.removeListener(\"close\", onTransportClose);\n            this.off(\"close\", onclose);\n            this.off(\"upgrading\", onupgrade);\n        };\n        transport.once(\"open\", onTransportOpen);\n        transport.once(\"error\", onerror);\n        transport.once(\"close\", onTransportClose);\n        this.once(\"close\", onclose);\n        this.once(\"upgrading\", onupgrade);\n        transport.open();\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @api private\n     */\n    onOpen() {\n        debug(\"socket open\");\n        this.readyState = \"open\";\n        Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n        this.emitReserved(\"open\");\n        this.flush();\n        // we check for `readyState` in case an `open`\n        // listener already closed the socket\n        if (\"open\" === this.readyState &&\n            this.opts.upgrade &&\n            this.transport.pause) {\n            debug(\"starting upgrade probes\");\n            let i = 0;\n            const l = this.upgrades.length;\n            for (; i < l; i++) {\n                this.probe(this.upgrades[i]);\n            }\n        }\n    }\n    /**\n     * Handles a packet.\n     *\n     * @api private\n     */\n    onPacket(packet) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n            this.emitReserved(\"packet\", packet);\n            // Socket is live - any packet counts\n            this.emitReserved(\"heartbeat\");\n            switch (packet.type) {\n                case \"open\":\n                    this.onHandshake(JSON.parse(packet.data));\n                    break;\n                case \"ping\":\n                    this.resetPingTimeout();\n                    this.sendPacket(\"pong\");\n                    this.emitReserved(\"ping\");\n                    this.emitReserved(\"pong\");\n                    break;\n                case \"error\":\n                    const err = new Error(\"server error\");\n                    // @ts-ignore\n                    err.code = packet.data;\n                    this.onError(err);\n                    break;\n                case \"message\":\n                    this.emitReserved(\"data\", packet.data);\n                    this.emitReserved(\"message\", packet.data);\n                    break;\n            }\n        }\n        else {\n            debug('packet received with socket readyState \"%s\"', this.readyState);\n        }\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @api private\n     */\n    onHandshake(data) {\n        this.emitReserved(\"handshake\", data);\n        this.id = data.sid;\n        this.transport.query.sid = data.sid;\n        this.upgrades = this.filterUpgrades(data.upgrades);\n        this.pingInterval = data.pingInterval;\n        this.pingTimeout = data.pingTimeout;\n        this.onOpen();\n        // In case open handler closes socket\n        if (\"closed\" === this.readyState)\n            return;\n        this.resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @api private\n     */\n    resetPingTimeout() {\n        this.clearTimeoutFn(this.pingTimeoutTimer);\n        this.pingTimeoutTimer = this.setTimeoutFn(() => {\n            this.onClose(\"ping timeout\");\n        }, this.pingInterval + this.pingTimeout);\n        if (this.opts.autoUnref) {\n            this.pingTimeoutTimer.unref();\n        }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @api private\n     */\n    onDrain() {\n        this.writeBuffer.splice(0, this.prevBufferLen);\n        // setting prevBufferLen = 0 is very important\n        // for example, when upgrading, upgrade packet is sent over,\n        // and a nonzero prevBufferLen could cause problems on `drain`\n        this.prevBufferLen = 0;\n        if (0 === this.writeBuffer.length) {\n            this.emitReserved(\"drain\");\n        }\n        else {\n            this.flush();\n        }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @api private\n     */\n    flush() {\n        if (\"closed\" !== this.readyState &&\n            this.transport.writable &&\n            !this.upgrading &&\n            this.writeBuffer.length) {\n            debug(\"flushing %d packets in socket\", this.writeBuffer.length);\n            this.transport.send(this.writeBuffer);\n            // keep track of current length of writeBuffer\n            // splice writeBuffer and callbackBuffer on `drain`\n            this.prevBufferLen = this.writeBuffer.length;\n            this.emitReserved(\"flush\");\n        }\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} message.\n     * @param {Function} callback function.\n     * @param {Object} options.\n     * @return {Socket} for chaining.\n     * @api public\n     */\n    write(msg, options, fn) {\n        this.sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    send(msg, options, fn) {\n        this.sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} callback function.\n     * @api private\n     */\n    sendPacket(type, data, options, fn) {\n        if (\"function\" === typeof data) {\n            fn = data;\n            data = undefined;\n        }\n        if (\"function\" === typeof options) {\n            fn = options;\n            options = null;\n        }\n        if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n            return;\n        }\n        options = options || {};\n        options.compress = false !== options.compress;\n        const packet = {\n            type: type,\n            data: data,\n            options: options\n        };\n        this.emitReserved(\"packetCreate\", packet);\n        this.writeBuffer.push(packet);\n        if (fn)\n            this.once(\"flush\", fn);\n        this.flush();\n    }\n    /**\n     * Closes the connection.\n     *\n     * @api public\n     */\n    close() {\n        const close = () => {\n            this.onClose(\"forced close\");\n            debug(\"socket closing - telling transport to close\");\n            this.transport.close();\n        };\n        const cleanupAndClose = () => {\n            this.off(\"upgrade\", cleanupAndClose);\n            this.off(\"upgradeError\", cleanupAndClose);\n            close();\n        };\n        const waitForUpgrade = () => {\n            // wait for upgrade to finish since we can't send packets while pausing a transport\n            this.once(\"upgrade\", cleanupAndClose);\n            this.once(\"upgradeError\", cleanupAndClose);\n        };\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n            this.readyState = \"closing\";\n            if (this.writeBuffer.length) {\n                this.once(\"drain\", () => {\n                    if (this.upgrading) {\n                        waitForUpgrade();\n                    }\n                    else {\n                        close();\n                    }\n                });\n            }\n            else if (this.upgrading) {\n                waitForUpgrade();\n            }\n            else {\n                close();\n            }\n        }\n        return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @api private\n     */\n    onError(err) {\n        debug(\"socket error %j\", err);\n        Socket.priorWebsocketSuccess = false;\n        this.emitReserved(\"error\", err);\n        this.onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @api private\n     */\n    onClose(reason, desc) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            debug('socket close with reason: \"%s\"', reason);\n            // clear timers\n            this.clearTimeoutFn(this.pingTimeoutTimer);\n            // stop event from firing again for transport\n            this.transport.removeAllListeners(\"close\");\n            // ensure transport won't stay open\n            this.transport.close();\n            // ignore further transport communication\n            this.transport.removeAllListeners();\n            if (typeof removeEventListener === \"function\") {\n                removeEventListener(\"offline\", this.offlineEventListener, false);\n            }\n            // set ready state\n            this.readyState = \"closed\";\n            // clear session id\n            this.id = null;\n            // emit close event\n            this.emitReserved(\"close\", reason, desc);\n            // clean buffers after, so users can still\n            // grab the buffers on `close` event\n            this.writeBuffer = [];\n            this.prevBufferLen = 0;\n        }\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} server upgrades\n     * @api private\n     *\n     */\n    filterUpgrades(upgrades) {\n        const filteredUpgrades = [];\n        let i = 0;\n        const j = upgrades.length;\n        for (; i < j; i++) {\n            if (~this.transports.indexOf(upgrades[i]))\n                filteredUpgrades.push(upgrades[i]);\n        }\n        return filteredUpgrades;\n    }\n}\nexports.Socket = Socket;\nSocket.protocol = engine_io_parser_1.protocol;\nfunction clone(obj) {\n    const o = {};\n    for (let i in obj) {\n        if (obj.hasOwnProperty(i)) {\n            o[i] = obj[i];\n        }\n    }\n    return o;\n}\n"]},"metadata":{},"sourceType":"script"}